"use strict";
(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["node_modules_capacitor-secure-storage-plugin_dist_esm_web_js"],{

/***/ 1004:
/*!**********************************************************************!*\
  !*** ./node_modules/capacitor-secure-storage-plugin/dist/esm/web.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SecureStoragePlugin": () => (/* binding */ SecureStoragePlugin),
/* harmony export */   "SecureStoragePluginWeb": () => (/* binding */ SecureStoragePluginWeb)
/* harmony export */ });
/* harmony import */ var _capacitor_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @capacitor/core */ 5099);

class SecureStoragePluginWeb extends _capacitor_core__WEBPACK_IMPORTED_MODULE_0__.WebPlugin {
    constructor() {
        super({
            name: 'SecureStoragePlugin',
            platforms: ['web'],
        });
        this.PREFIX = 'cap_sec_';
        this.addPrefix = (key) => this.PREFIX + key;
    }
    get(options) {
        return localStorage.getItem(this.addPrefix(options.key)) !== null
            ? Promise.resolve({
                value: atob(localStorage.getItem(this.addPrefix(options.key))),
            })
            : Promise.reject('Item with given key does not exist');
    }
    set(options) {
        localStorage.setItem(this.addPrefix(options.key), btoa(options.value));
        return Promise.resolve({ value: true });
    }
    remove(options) {
        localStorage.removeItem(this.addPrefix(options.key));
        return Promise.resolve({ value: true });
    }
    clear() {
        for (const key in localStorage) {
            if (key.indexOf(this.PREFIX) === 0) {
                localStorage.removeItem(key);
            }
        }
        return Promise.resolve({ value: true });
    }
    keys() {
        const keys = Object.keys(localStorage).filter((k) => k.indexOf(this.PREFIX) === 0);
        return Promise.resolve({ value: keys });
    }
    getPlatform() {
        return Promise.resolve({ value: 'web' });
    }
}
const SecureStoragePlugin = new SecureStoragePluginWeb();



/***/ })

}]);
//# sourceMappingURL=node_modules_capacitor-secure-storage-plugin_dist_esm_web_js.js.map